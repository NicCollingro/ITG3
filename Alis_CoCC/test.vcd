$date
	Wed Jun 25 20:30:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module computer $end
$var wire 1 ! clk $end
$var wire 8 " data_bus [7:0] $end
$var wire 1 # halt $end
$var wire 8 $ reg_a [7:0] $end
$var wire 8 % reg_b [7:0] $end
$var wire 8 & state [7:0] $end
$var wire 1 ' ram_clk $end
$var wire 3 ( operand2 [2:0] $end
$var wire 3 ) operand1 [2:0] $end
$var wire 8 * opcode [7:0] $end
$var wire 3 + oaddr [2:0] $end
$var wire 1 , internal_clk $end
$var wire 8 - instruction [7:0] $end
$var wire 3 . iaddr [2:0] $end
$var wire 1 / flag_zero $end
$var wire 1 0 flag_carry $end
$var wire 1 1 cycle_clk $end
$var wire 1 2 c_so $end
$var wire 1 3 c_si $end
$var wire 1 4 c_sd $end
$var wire 1 5 c_ro $end
$var wire 1 6 c_ri $end
$var wire 1 7 c_rfo $end
$var wire 1 8 c_rfi $end
$var wire 1 9 c_mi $end
$var wire 1 : c_ii $end
$var wire 1 ; c_halt $end
$var wire 1 < c_eo $end
$var wire 1 = c_ee $end
$var wire 1 > c_cs $end
$var wire 1 ? c_co $end
$var wire 1 @ c_ci $end
$var wire 3 A alu_mode [2:0] $end
$var wire 8 B addrbus [7:0] $end
$var reg 1 C reset $end
$scope module FINITO $end
$var wire 1 C reset $end
$var wire 1 D reset_cycle $end
$var wire 8 E opcode [7:0] $end
$var wire 1 1 clk $end
$var reg 4 F cycle [3:0] $end
$var reg 8 G state [7:0] $end
$upscope $end
$scope module IRelai $end
$var wire 8 H in [7:0] $end
$var wire 8 I out [7:0] $end
$var wire 1 J h8 $end
$var wire 1 K h7 $end
$var wire 1 L h6 $end
$var wire 1 M h5 $end
$var wire 1 N h4 $end
$var wire 1 O h3 $end
$var wire 1 P h2 $end
$var wire 1 Q h1 $end
$var wire 1 : en $end
$var wire 1 , clk $end
$scope module d1 $end
$var wire 1 Q D $end
$var wire 1 R mitte $end
$var wire 1 , clk $end
$var wire 1 S Q $end
$scope module Latch $end
$var wire 1 Q D $end
$var wire 1 R Q $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V clk $end
$var wire 1 W nq $end
$upscope $end
$scope module catch $end
$var wire 1 R D $end
$var wire 1 S Q $end
$var wire 1 X a $end
$var wire 1 Y b $end
$var wire 1 Z nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d2 $end
$var wire 1 P D $end
$var wire 1 [ mitte $end
$var wire 1 , clk $end
$var wire 1 \ Q $end
$scope module Latch $end
$var wire 1 P D $end
$var wire 1 [ Q $end
$var wire 1 ] a $end
$var wire 1 ^ b $end
$var wire 1 _ clk $end
$var wire 1 ` nq $end
$upscope $end
$scope module catch $end
$var wire 1 [ D $end
$var wire 1 \ Q $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 c nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d3 $end
$var wire 1 O D $end
$var wire 1 d mitte $end
$var wire 1 , clk $end
$var wire 1 e Q $end
$scope module Latch $end
$var wire 1 O D $end
$var wire 1 d Q $end
$var wire 1 f a $end
$var wire 1 g b $end
$var wire 1 h clk $end
$var wire 1 i nq $end
$upscope $end
$scope module catch $end
$var wire 1 d D $end
$var wire 1 e Q $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d4 $end
$var wire 1 N D $end
$var wire 1 m mitte $end
$var wire 1 , clk $end
$var wire 1 n Q $end
$scope module Latch $end
$var wire 1 N D $end
$var wire 1 m Q $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q clk $end
$var wire 1 r nq $end
$upscope $end
$scope module catch $end
$var wire 1 m D $end
$var wire 1 n Q $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d5 $end
$var wire 1 M D $end
$var wire 1 v mitte $end
$var wire 1 , clk $end
$var wire 1 w Q $end
$scope module Latch $end
$var wire 1 M D $end
$var wire 1 v Q $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z clk $end
$var wire 1 { nq $end
$upscope $end
$scope module catch $end
$var wire 1 v D $end
$var wire 1 w Q $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d6 $end
$var wire 1 L D $end
$var wire 1 !" mitte $end
$var wire 1 , clk $end
$var wire 1 "" Q $end
$scope module Latch $end
$var wire 1 L D $end
$var wire 1 !" Q $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 %" clk $end
$var wire 1 &" nq $end
$upscope $end
$scope module catch $end
$var wire 1 !" D $end
$var wire 1 "" Q $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 )" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d7 $end
$var wire 1 K D $end
$var wire 1 *" mitte $end
$var wire 1 , clk $end
$var wire 1 +" Q $end
$scope module Latch $end
$var wire 1 K D $end
$var wire 1 *" Q $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." clk $end
$var wire 1 /" nq $end
$upscope $end
$scope module catch $end
$var wire 1 *" D $end
$var wire 1 +" Q $end
$var wire 1 0" a $end
$var wire 1 1" b $end
$var wire 1 2" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d8 $end
$var wire 1 J D $end
$var wire 1 3" mitte $end
$var wire 1 , clk $end
$var wire 1 4" Q $end
$scope module Latch $end
$var wire 1 J D $end
$var wire 1 3" Q $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 7" clk $end
$var wire 1 8" nq $end
$upscope $end
$scope module catch $end
$var wire 1 3" D $end
$var wire 1 4" Q $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 ;" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$upscope $end
$scope module MARina $end
$var wire 8 <" in [7:0] $end
$var wire 8 =" out [7:0] $end
$var wire 1 >" h8 $end
$var wire 1 ?" h7 $end
$var wire 1 @" h6 $end
$var wire 1 A" h5 $end
$var wire 1 B" h4 $end
$var wire 1 C" h3 $end
$var wire 1 D" h2 $end
$var wire 1 E" h1 $end
$var wire 1 9 en $end
$var wire 1 , clk $end
$scope module d1 $end
$var wire 1 E" D $end
$var wire 1 F" mitte $end
$var wire 1 , clk $end
$var wire 1 G" Q $end
$scope module Latch $end
$var wire 1 E" D $end
$var wire 1 F" Q $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" clk $end
$var wire 1 K" nq $end
$upscope $end
$scope module catch $end
$var wire 1 F" D $end
$var wire 1 G" Q $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 N" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d2 $end
$var wire 1 D" D $end
$var wire 1 O" mitte $end
$var wire 1 , clk $end
$var wire 1 P" Q $end
$scope module Latch $end
$var wire 1 D" D $end
$var wire 1 O" Q $end
$var wire 1 Q" a $end
$var wire 1 R" b $end
$var wire 1 S" clk $end
$var wire 1 T" nq $end
$upscope $end
$scope module catch $end
$var wire 1 O" D $end
$var wire 1 P" Q $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d3 $end
$var wire 1 C" D $end
$var wire 1 X" mitte $end
$var wire 1 , clk $end
$var wire 1 Y" Q $end
$scope module Latch $end
$var wire 1 C" D $end
$var wire 1 X" Q $end
$var wire 1 Z" a $end
$var wire 1 [" b $end
$var wire 1 \" clk $end
$var wire 1 ]" nq $end
$upscope $end
$scope module catch $end
$var wire 1 X" D $end
$var wire 1 Y" Q $end
$var wire 1 ^" a $end
$var wire 1 _" b $end
$var wire 1 `" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d4 $end
$var wire 1 B" D $end
$var wire 1 a" mitte $end
$var wire 1 , clk $end
$var wire 1 b" Q $end
$scope module Latch $end
$var wire 1 B" D $end
$var wire 1 a" Q $end
$var wire 1 c" a $end
$var wire 1 d" b $end
$var wire 1 e" clk $end
$var wire 1 f" nq $end
$upscope $end
$scope module catch $end
$var wire 1 a" D $end
$var wire 1 b" Q $end
$var wire 1 g" a $end
$var wire 1 h" b $end
$var wire 1 i" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d5 $end
$var wire 1 A" D $end
$var wire 1 j" mitte $end
$var wire 1 , clk $end
$var wire 1 k" Q $end
$scope module Latch $end
$var wire 1 A" D $end
$var wire 1 j" Q $end
$var wire 1 l" a $end
$var wire 1 m" b $end
$var wire 1 n" clk $end
$var wire 1 o" nq $end
$upscope $end
$scope module catch $end
$var wire 1 j" D $end
$var wire 1 k" Q $end
$var wire 1 p" a $end
$var wire 1 q" b $end
$var wire 1 r" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d6 $end
$var wire 1 @" D $end
$var wire 1 s" mitte $end
$var wire 1 , clk $end
$var wire 1 t" Q $end
$scope module Latch $end
$var wire 1 @" D $end
$var wire 1 s" Q $end
$var wire 1 u" a $end
$var wire 1 v" b $end
$var wire 1 w" clk $end
$var wire 1 x" nq $end
$upscope $end
$scope module catch $end
$var wire 1 s" D $end
$var wire 1 t" Q $end
$var wire 1 y" a $end
$var wire 1 z" b $end
$var wire 1 {" nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d7 $end
$var wire 1 ?" D $end
$var wire 1 |" mitte $end
$var wire 1 , clk $end
$var wire 1 }" Q $end
$scope module Latch $end
$var wire 1 ?" D $end
$var wire 1 |" Q $end
$var wire 1 ~" a $end
$var wire 1 !# b $end
$var wire 1 "# clk $end
$var wire 1 ## nq $end
$upscope $end
$scope module catch $end
$var wire 1 |" D $end
$var wire 1 }" Q $end
$var wire 1 $# a $end
$var wire 1 %# b $end
$var wire 1 &# nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$scope module d8 $end
$var wire 1 >" D $end
$var wire 1 '# mitte $end
$var wire 1 , clk $end
$var wire 1 (# Q $end
$scope module Latch $end
$var wire 1 >" D $end
$var wire 1 '# Q $end
$var wire 1 )# a $end
$var wire 1 *# b $end
$var wire 1 +# clk $end
$var wire 1 ,# nq $end
$upscope $end
$scope module catch $end
$var wire 1 '# D $end
$var wire 1 (# Q $end
$var wire 1 -# a $end
$var wire 1 .# b $end
$var wire 1 /# nq $end
$var wire 1 , clk $end
$upscope $end
$upscope $end
$upscope $end
$scope module bazamba $end
$var wire 8 0# addr [7:0] $end
$var wire 8 1# bus [7:0] $end
$var wire 1 6 we $end
$var wire 1 5 oe $end
$var wire 1 ' clk $end
$upscope $end
$scope module coc $end
$var wire 8 2# idata [7:0] $end
$var wire 8 3# odata [7:0] $end
$var wire 8 4# rega [7:0] $end
$var wire 8 5# regb [7:0] $end
$var wire 1 8 we $end
$var wire 1 7 oe $end
$var wire 3 6# oaddr [2:0] $end
$var wire 3 7# iaddr [2:0] $end
$var wire 1 , clk $end
$upscope $end
$scope module cocks $end
$var wire 1 ! clk $end
$var wire 1 # halt $end
$var wire 1 C reset $end
$var reg 3 8# cnt [2:0] $end
$var reg 1 1 cycle_clk $end
$var reg 1 , internal_clk $end
$var reg 1 ' ram_clk $end
$upscope $end
$scope module deco $end
$var wire 8 9# instruction [7:0] $end
$var wire 3 :# operand2 [2:0] $end
$var wire 3 ;# operand1 [2:0] $end
$var reg 3 <# alu_mode [2:0] $end
$var reg 3 =# iaddr [2:0] $end
$var reg 3 ># oaddr [2:0] $end
$var reg 8 ?# opcode [7:0] $end
$upscope $end
$scope module malu $end
$var wire 8 @# in_a [7:0] $end
$var wire 8 A# in_b [7:0] $end
$var wire 3 B# mode [2:0] $end
$var wire 8 C# out [7:0] $end
$var wire 8 D# xoder [7:0] $end
$var wire 8 E# und [7:0] $end
$var wire 1 F# subc $end
$var wire 8 G# sub [7:0] $end
$var wire 8 H# oder [7:0] $end
$var wire 1 < eo $end
$var wire 1 = ee $end
$var wire 1 I# cad $end
$var wire 8 J# add [7:0] $end
$var reg 1 0 flag_carry $end
$var reg 1 / flag_zero $end
$var reg 8 K# r_out [7:0] $end
$scope module gore $end
$var wire 8 L# a [7:0] $end
$var wire 8 M# b [7:0] $end
$var wire 8 N# out [7:0] $end
$upscope $end
$scope module hixbi $end
$var wire 8 O# a [7:0] $end
$var wire 8 P# b [7:0] $end
$var wire 8 Q# out [7:0] $end
$upscope $end
$scope module land $end
$var wire 8 R# a [7:0] $end
$var wire 8 S# b [7:0] $end
$var wire 8 T# out [7:0] $end
$upscope $end
$scope module nadder $end
$var wire 8 U# in_a [7:0] $end
$var wire 8 V# in_b [7:0] $end
$var wire 8 W# out_diff [7:0] $end
$var wire 1 F# out_carry $end
$var wire 8 X# cin [7:0] $end
$scope module S0 $end
$var wire 1 Y# a $end
$var wire 1 Z# b $end
$var wire 1 [# cin $end
$var wire 1 \# cout $end
$var wire 1 ]# diff $end
$upscope $end
$scope module S1 $end
$var wire 1 ^# a $end
$var wire 1 _# b $end
$var wire 1 `# cin $end
$var wire 1 a# cout $end
$var wire 1 b# diff $end
$upscope $end
$scope module S2 $end
$var wire 1 c# a $end
$var wire 1 d# b $end
$var wire 1 e# cin $end
$var wire 1 f# cout $end
$var wire 1 g# diff $end
$upscope $end
$scope module S3 $end
$var wire 1 h# a $end
$var wire 1 i# b $end
$var wire 1 j# cin $end
$var wire 1 k# cout $end
$var wire 1 l# diff $end
$upscope $end
$scope module S4 $end
$var wire 1 m# a $end
$var wire 1 n# b $end
$var wire 1 o# cin $end
$var wire 1 p# cout $end
$var wire 1 q# diff $end
$upscope $end
$scope module S5 $end
$var wire 1 r# a $end
$var wire 1 s# b $end
$var wire 1 t# cin $end
$var wire 1 u# cout $end
$var wire 1 v# diff $end
$upscope $end
$scope module S6 $end
$var wire 1 w# a $end
$var wire 1 x# b $end
$var wire 1 y# cin $end
$var wire 1 z# cout $end
$var wire 1 {# diff $end
$upscope $end
$scope module S7 $end
$var wire 1 |# a $end
$var wire 1 }# b $end
$var wire 1 ~# cin $end
$var wire 1 F# cout $end
$var wire 1 !$ diff $end
$upscope $end
$upscope $end
$scope module vadder $end
$var wire 8 "$ in_a [7:0] $end
$var wire 8 #$ in_b [7:0] $end
$var wire 8 $$ out_sum [7:0] $end
$var wire 1 I# out_carry $end
$var wire 8 %$ c [7:0] $end
$scope module FA0 $end
$var wire 1 &$ a $end
$var wire 1 '$ b $end
$var wire 1 ($ cin $end
$var wire 1 )$ cout $end
$var wire 1 *$ sum $end
$upscope $end
$scope module FA1 $end
$var wire 1 +$ a $end
$var wire 1 ,$ b $end
$var wire 1 -$ cin $end
$var wire 1 .$ cout $end
$var wire 1 /$ sum $end
$upscope $end
$scope module FA2 $end
$var wire 1 0$ a $end
$var wire 1 1$ b $end
$var wire 1 2$ cin $end
$var wire 1 3$ cout $end
$var wire 1 4$ sum $end
$upscope $end
$scope module FA3 $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 7$ cin $end
$var wire 1 8$ cout $end
$var wire 1 9$ sum $end
$upscope $end
$scope module FA4 $end
$var wire 1 :$ a $end
$var wire 1 ;$ b $end
$var wire 1 <$ cin $end
$var wire 1 =$ cout $end
$var wire 1 >$ sum $end
$upscope $end
$scope module FA5 $end
$var wire 1 ?$ a $end
$var wire 1 @$ b $end
$var wire 1 A$ cin $end
$var wire 1 B$ cout $end
$var wire 1 C$ sum $end
$upscope $end
$scope module FA6 $end
$var wire 1 D$ a $end
$var wire 1 E$ b $end
$var wire 1 F$ cin $end
$var wire 1 G$ cout $end
$var wire 1 H$ sum $end
$upscope $end
$scope module FA7 $end
$var wire 1 I$ a $end
$var wire 1 J$ b $end
$var wire 1 K$ cin $end
$var wire 1 I# cout $end
$var wire 1 L$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module pc $end
$var wire 1 , clk $end
$var wire 1 M$ down $end
$var wire 8 N$ in [7:0] $end
$var wire 8 O$ out [7:0] $end
$var wire 1 C reset $end
$var wire 1 > set $end
$var wire 1 ? oe $end
$var reg 8 P$ r_out [7:0] $end
$upscope $end
$scope module rolo $end
$var wire 1 0 flag_carry $end
$var wire 1 / flag_zero $end
$var wire 1 Q$ jump_allowed $end
$var wire 3 R$ operand1 [2:0] $end
$var wire 3 S$ operand2 [2:0] $end
$var wire 8 T$ state [7:0] $end
$var wire 1 2 c_so $end
$var wire 1 3 c_si $end
$var wire 1 4 c_sd $end
$var wire 1 5 c_ro $end
$var wire 1 6 c_ri $end
$var wire 1 7 c_rfo $end
$var wire 1 8 c_rfi $end
$var wire 1 9 c_mi $end
$var wire 1 : c_ii $end
$var wire 1 ; c_halt $end
$var wire 1 < c_eo $end
$var wire 1 = c_ee $end
$var wire 1 > c_cs $end
$var wire 1 ? c_co $end
$var wire 1 @ c_ci $end
$upscope $end
$scope module schdeck $end
$var wire 1 , clk $end
$var wire 1 4 down $end
$var wire 8 U$ in [7:0] $end
$var wire 1 2 oe $end
$var wire 8 V$ out [7:0] $end
$var wire 1 C reset $end
$var wire 1 C set $end
$var reg 8 W$ r_out [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 W$
bz V$
b11111111 U$
b0 T$
bx S$
bx R$
xQ$
b0 P$
bz O$
bz N$
0M$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
0($
x'$
x&$
bzxxxxxxx %$
bx $$
bx #$
bx "$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
0[#
xZ#
xY#
bzxxxxxxx X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
b0 K#
bx J#
xI#
bx H#
bx G#
xF#
bx E#
bx D#
bz C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
b1 8#
bx 7#
bx 6#
bx 5#
bx 4#
bz 3#
bz 2#
bz 1#
bx 0#
x/#
1.#
1-#
x,#
1+#
x*#
x)#
x(#
x'#
x&#
1%#
1$#
x##
1"#
x!#
x~"
x}"
x|"
x{"
1z"
1y"
xx"
1w"
xv"
xu"
xt"
xs"
xr"
1q"
1p"
xo"
1n"
xm"
xl"
xk"
xj"
xi"
1h"
1g"
xf"
1e"
xd"
xc"
xb"
xa"
x`"
1_"
1^"
x]"
1\"
x["
xZ"
xY"
xX"
xW"
1V"
1U"
xT"
1S"
xR"
xQ"
xP"
xO"
xN"
1M"
1L"
xK"
1J"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
bx ="
bz <"
x;"
1:"
19"
x8"
17"
x6"
x5"
x4"
x3"
x2"
11"
10"
x/"
1."
x-"
x,"
x+"
x*"
x)"
1("
1'"
x&"
1%"
x$"
x#"
x""
x!"
x~
1}
1|
x{
1z
xy
xx
xw
xv
xu
1t
1s
xr
1q
xp
xo
xn
xm
xl
1k
1j
xi
1h
xg
xf
xe
xd
xc
1b
1a
x`
1_
x^
x]
x\
x[
xZ
1Y
1X
xW
1V
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
bx I
bz H
b0 G
b0 F
bx E
1D
0C
bx B
bx A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
bx .
bx -
0,
bx +
bx *
bx )
bx (
0'
b0 &
bx %
bx $
z#
bz "
z!
$end
